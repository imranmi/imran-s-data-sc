---
title: "Geospatial Analysis3 - Spatially Constrained Clustering: ClustGeo method"
author: "Imran Ibrahim"
date: August 11, 2024
date-modified: "last-modified"
toc: true
execute: 
  eval: true
  echo: true
  freeze: true
  warning: false
  message: false
---

# Loading R packages

```{r}
pacman::p_load(spdep, sp, tmap, sf, ClustGeo, 
               ggpubr, cluster, factoextra, NbClust,
               heatmaply, corrplot, psych, tidyverse, GGally)
```

```{r}
ACLED_MMR <- read_csv("data/MMR.csv")
```

```{r}
mmr_shp_mimu_2 <-  st_read(dsn = "data/geospatial3",  
                  layer = "mmr_polbnda_adm2_250k_mimu")
```

```{r}
ACLED_MMR_1 <- ACLED_MMR %>%
  mutate(admin1 = case_when(
    admin1 == "Bago-East" ~ "Bago (East)",
    admin1 == "Bago-West" ~ "Bago (West)",
    admin1 == "Shan-North" ~ "Shan (North)",
    admin1 == "Shan-South" ~ "Shan (South)",
    admin1 == "Shan-East" ~ "Shan (East)",
    TRUE ~ as.character(admin1)
  ))
```

```{r}
ACLED_MMR_1 <- ACLED_MMR_1 %>%
  mutate(admin2 = case_when(
    admin2 == "Yangon-East" ~ "Yangon (East)",
    admin2 == "Yangon-West" ~ "Yangon (West)",
    admin2 == "Yangon-North" ~ "Yangon (North)",
    admin2 == "Yangon-South" ~ "Yangon (South)",
    admin2 == "Mong Pawk (Wa SAD)" ~ "Tachileik",
    admin2 == "Nay Pyi Taw" ~ "Det Khi Na",
    admin2 == "Yangon" ~ "Yangon (West)",
    TRUE ~ as.character(admin2)
  ))
```

```{r}
ACLED_MMR_1 <- ACLED_MMR_1 %>%
  filter(year >= 2020 & year <= 2023)
```

```{r}
Data2 <- ACLED_MMR_1 %>%
    group_by(year, admin2, event_type) %>%
    summarise(Incidents = n(),
              Fatalities = sum(fatalities, na.rm = TRUE)) %>%
              
    ungroup()
```

```{r}
library(tidyr)


years <- unique(Data2$year)
event_types <- unique(Data2$event_type)
districts <- unique(Data2$admin2)

# Using complete() to create all combinations of year, admin2, and event_type
# and replacing NA values with 0 for Incidents and Fatalities
Data2_complete <- Data2 %>%
  complete(year = years, admin2 = districts, event_type = event_types, fill = list(Incidents = 0, Fatalities = 0))
```

```{r}
library(dplyr)
library(tidyr)

data2_summary <- Data2_complete %>%
  group_by(admin2, event_type, year) %>%
  summarise(Incidents = sum(Incidents), Fatalities = sum(Fatalities), .groups = 'drop')  # Summarize and drop grouping

# Now we'll spread this into a wider format
data2_long <- data2_summary %>%
  pivot_wider(
    names_from = c(event_type, year), 
    values_from = c(Incidents, Fatalities),
    names_glue = "{event_type}_{year}_{.value}"  
  )

```

## Filtering the data set for just "Battles_2022_Incidents"

```{r}
selected <- data2_long %>%
  select(admin2, Battles_2022_Incidents)
```

```{r}
selected
```

## Spatially Constrained Clustering: ClustGeo Method

### Computing proximity matrix

In R, many packages provide functions to calculate distance matrix. We will compute the proximity matrix by using [*dist()*](https://stat.ethz.ch/R-manual/R-devel/library/stats/html/dist.html) of R.

*dist()* supports six distance proximity calculations, they are: **euclidean, maximum, manhattan, canberra, binary and minkowski**. The default is *euclidean* proximity matrix.

The code chunk below is used to compute the proximity matrix using *euclidean* method.

```{r}
proxmat <- dist(selected, method = 'euclidean')
```

```{r}
proxmat
```

### A short note about ClustGeo package

[**ClustGeo**](https://cran.r-project.org/web/packages/ClustGeo/) package is an R package specially designed to support the need of performing spatially constrained cluster analysis. More specifically, it provides a Ward-like hierarchical clustering algorithm called `hclustgeo()` including spatial/geographical constraints.

In a nutshell, the algorithm uses two dissimilarity matrices D0 and D1 along with a mixing parameter alpha, whereby the value of alpha must be a real number between \[0, 1\]. D0 can be non-Euclidean and the weights of the observations can be non-uniform. It gives the dissimilarities in the **attribute/clustering variable space**. D1, on the other hand, gives the dissimilarities in the **constraint space**. The criterion minimised at each stage is a convex combination of the homogeneity criterion calculated with D0 and the homogeneity criterion calculated with D1.

The idea is then to determine a value of alpha which increases the spatial contiguity without deteriorating too much the quality of the solution based on the variables of interest. This need is supported by a function called `choicealpha()`.

### Ward-like hierarchical clustering: ClustGeo

ClustGeo package provides function called `hclustgeo()` to perform a typical Ward-like hierarchical clustering just like `hclust()` you learned in previous section.

To perform non-spatially constrained hierarchical clustering, we only need to provide the function a dissimilarity matrix as shown in the code chunk below.

```{r}
nongeo_cluster <- hclustgeo(proxmat)
plot(nongeo_cluster, cex = 0.5)
rect.hclust(nongeo_cluster, 
            k = 6, 
            border = 2:5)
```

```{r}
class(nongeo_cluster)
```

#### Mapping the clusters formed

```{r}
groups <- as.factor(cutree(nongeo_cluster, k=6))
```

```{r}
myanmar_ngeo_cluster <- cbind(mmr_shp_mimu_2, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)
```

```{r}
qtm(myanmar_ngeo_cluster, "CLUSTER")
```

### Spatially Constrained Hierarchical Clustering

Before we can perform spatially constrained hierarchical clustering, a spatial distance matrix will be derived by using [`st_distance()`](https://r-spatial.github.io/sf/reference/geos_measures.html) of sf package.

```{r}
dist <- st_distance(mmr_shp_mimu_2, mmr_shp_mimu_2)
distmat <- as.dist(dist)
```

Notice that `as.dist()` is used to convert the data frame into matrix.

Next, `choicealpha()` will be used to determine a suitable value for the mixing parameter alpha as shown in the code chunk below.

```{r}
cr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.1), K=6, graph = TRUE)
```

With reference to the graphs above, alpha = 0.6 will be used as shown in the code chunk below.

```{r}
clustG <- hclustgeo(proxmat, distmat, alpha = 0.6)
```

Next, `cutree()` is used to derive the cluster object.

```{r}
groups <- as.factor(cutree(clustG, k=6))
```

We will then join back the group list with mmr_shp_mimu polygon feature data frame by using the code chunk below.

```{r}
MMR_sf_Gcluster <- cbind(mmr_shp_mimu_2, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`)
```

We can now plot the map of the newly delineated spatially constrained clusters.

```{r}
qtm(MMR_sf_Gcluster, "CLUSTER")
```

## Visual Interpretation of Clusters

### Visualising individual clustering variable

Code chunk below is used to reveal the distribution of a clustering variable (i.e Battles_2022_Incidents) by cluster.

```{r}
#ggplot(data = myanmar_ngeo_cluster,
#       aes(x = CLUSTER, y = Battles_2022_Incidents)) +
#  geom_boxplot()
```

## References

Main reference: Kam, T.S. (2024). [Geographical Segmentation with Spatially Constrained Clustering Techniques](https://is415-gaa-tskam.netlify.app/in-class_ex/in-class_ex07/in-class_ex07-scca)
